1. Создать объект User c полями и перекрытым методом finalize

public class User {
    private int id;
    private String name;
    }
      @Override
        protected void finalize() throws Throwable {
            super.finalize();
            System.out.println("works");
        }
    }
...

2. Создать несколько объектов User и руками рассчитать сколько они будет занимать памяти.
Запрещено использовать библиотеку carrotsearch. Рассчитать надо теоретически.

new User(1,"java") занимает памяти - 24 + 26 + 20 добавляем  байт до кратности на 8 то есть будет 72

public class User {               заголовок = 12 байт
    private int id;               int = 4 байта
    private String name;          ссылка на String = 8 байт, итого 24
    }

далее считаем объект String:      заголовок = 12 байт
 private final byte[] value;      ссылка на массив 8 байт
 private final byte coder;        byte = 1 байт
 private int hash;                int = 4 байта
 private boolean hashIsZero;      boolean = 1 байт,  итого 26

далее считаем объект массива byte:
заголовок 12 байт + ('2' байта символ * на длину массива '4') = 20

3.Нужно найти информацию. Сколько памяти занимает пустой объект без полей.
Объект User, без полей по занимаемой памяти, равен размеру заголовка 12 байт, но так как число
не кратно 8. Память выравнивается и добавляются 4 байта пустых байтов.
Поэтому объект будет занимать 16 байтов.

4.Добиться состояния, когда виртуальная машины вызывает сборщик мусора самостоятельно.
За счет ключей xmx.

5.Используя ключ -Xmx4m, устанавливается максимальный размер памяти для JVM = 4 мегабайта.
В цикле создаю объекты без ссылок, когда память начинает заканчиваться, GC осуществляет сборку
недосягаемых мусорных объектов.